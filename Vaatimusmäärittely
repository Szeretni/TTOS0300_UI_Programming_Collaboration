Monopoli
Oksman Hannu, Paananen Ville, Tarvainen Antti

v1.2 11.4.2018

1. Johdanto
Ohjelmisto tehdään IT-instituutin opettajalle, Ari Rantalalle, opintojakson harjoitustietokantana jonka tavoitteena on 
virtuaalisten monopolipelien hallinnointi, käsittely ja tallennus. Tietokannan tarkoituksena on pystyä 
käsittelemään useaa eri peliä samaan aikaan, tallentamaan pelien tiedot tietokantaan, ja hallinnoimaan kaikkien pelien
tietoja kyseisessä tietokannassa.

2. Yleiskuvaus
Tietokanta asennettu RaspBerry Pi:lle.
Tietokannalle tehdään käyttöliittymäkurssin harjoitustyöksi visuaalinen C# käyttöliittymä, jolla monopolin pelaaminen tapahtuu.
Kyseinen c# ohjelma tallentaa tietoa pelin edetessä, ja lopuksi tallentaa loppuneen pelin tiedot tietokantaan.
Tietokantaa varten on tehty Microsoft Access käyttöliittymä, jonka avulla tietokantaa voidaan käyttää ja hallinnoida.

3. Toiminnot
Pakollisia toimintoja ovat:
  1. Usean käynnissä olevan pelien tallentaminen ja hallinnointi tietokannassa
  2. Päättyneiden pelien tilastot
  3. Pelaajien hallinnointi (Tunnus/nimi)
  4. Pelissä käytettävän datan hallinnointi (Valuutta, tontit, rakennukset..)

Mahdolliset toiminnot:
  1. Random-kortit
  2. Useat tietokantakäyttäjät (vain luku/kirjoitusoikeus)

4. Ulkoiset liittymät
  1. Monopoli, c# peli/käyttöliittymä (valmistuu 26.4.2018 mennessä)
     Yksi peli pelataan yhdellä ohjelman instanssilla (yhdellä tietokoneella) ohjelman käyttöliittymää käyttäen.
     Ohjelma tallentaa kaikki pelissä olevat dynaamiset tiedot (Pelaajat, tontit, rahatilanne jne.) pelin instanssiin,
     ja pelin loputtua tallentaa pelin tilastot kokonaisuutena tulosten yhteydessä.
     Ohjelmassa voi myös katsoa pelaajien/vanhojen pelien tilastoja (Henkilö X on voittanut Y peliä..)
     
  2. Tietokannan hallintatyökalu, Microsoft Access
     Vaikka itse peliohjelma lukee ja kirjoittaa dataa tietokantaan, sitä ei ole tehty tietokannan käsittelyä varten, vaan
     siihen on tehty oma työkalu. Microsoft Accesilla tehty tietokannan hallintatyökalulla pääsee käsiksi itse tietokantaan, ja
     näkee helposti kaiken tarvittavan datan.
     

5. Muut ominaisuudet
Suorituskyky: perus-PC (Koulun kone, 8GB RAM, 3.5GHz:n prosessori, n. 10 000 rivin tietomäärällä) alle 1 sekunti.
Tietoturva: Eristyneisyystaso nostetaan Serializableen, joka estää ongelmat 'Dirty Read', 'Nonrepeatable Read' ja 'Phantoms'. Transaktiot toteutetaan ohjelmallisesti. Autocommit asetetaan nollaan lopullisessa versiossa. Näillä toimenpiteillä päivitysten välisiä häiriöitä ja sekaantumisia.
Käytettävyys: Dataan pääsee helposti käsiksi, hyvä käyttöliittymä.

/* LISÄOHJE */
/* TÄMÄ POISTETAAN ENNEN ESITYSTÄ */
1. Tarkoitus
Vaatimusmäärittelyn tarkoituksena on kartoittaa asiakkaan tarpeet ja toiveet toteutettavan järjestelmän suhteen, tarkemmin kuin työn 
tehtävänannossa on määritelty. Vaikka dokumentti laaditaan yhteistyössä asiakkaan kanssa, on siinä jo syytä ottaa huomioon myös 
toteutukselle jo näköpiirissä olevat tekniset rajoitukset.

2. Tehtävät
Määritellään yhdessä asiakkaan kanssa järjestelmän:
käyttäjät, käyttöympäristö ja käyttötavat
rajoitukset, kuten tietyt toteutustyökalut
liittymät muihin järjestelmiin
toiminnot, käyttöliittymä
ei-toiminnalliset ominaisuudet, kuten:
vasteajat
tietoturva
käytettävyys
ylläpidettävyys
siirrettävyys

3. Tulokset
Vaatimusmäärittelyn tuloksena on vaatimusmäärittelydokumentti. Vaatimusmäärittely on laadittava yhteistyössä työn asiakkaan kanssa. 
Vaatimukset on syytä priorisoida: mitkä ovat järjestelmälle välttämättömiä (must), mitkä toivottavia (useful), mitkä muuten vaan 
kivoja ominaisuuksia (nice to have).
